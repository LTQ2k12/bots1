# bot.py
import discord
from discord.ext import commands
import json
import os
from keep_alive import keep_alive  # gi·ªØ bot s·ªëng 24/24

TOKEN = os.getenv("TOKEN")  # l·∫•y token t·ª´ Secrets tr√™n Replit
DATA_FILE = "status_data.json"

intents = discord.Intents.all()
bot = commands.Bot(command_prefix="!", intents=intents)

# ====== Load / Save Data ======
def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# ====== View nh·∫≠p th√¥ng tin ======
class InfoView(discord.ui.View):
    def __init__(self, user_id):
        super().__init__(timeout=300)
        self.user_id = user_id

    @discord.ui.button(label="B·∫°n ƒëang ch∆°i game g√¨", style=discord.ButtonStyle.primary)
    async def game_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.user_id:
            return await interaction.response.send_message("‚ùå Kh√¥ng ph·∫£i form c·ªßa b·∫°n.", ephemeral=True)
        await interaction.response.send_modal(InputModal(self.user_id, "game", "Nh·∫≠p game b·∫°n ƒëang ch∆°i"))

    @discord.ui.button(label="C√≥ NY ch∆∞a", style=discord.ButtonStyle.primary)
    async def ny_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.user_id:
            return await interaction.response.send_message("‚ùå Kh√¥ng ph·∫£i form c·ªßa b·∫°n.", ephemeral=True)
        await interaction.response.send_modal(InputModal(self.user_id, "ny", "B·∫°n c√≥ NY ch∆∞a?"))

    @discord.ui.button(label="C√≥ s·ª•c kh√¥ng", style=discord.ButtonStyle.primary)
    async def suc_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.user_id:
            return await interaction.response.send_message("‚ùå Kh√¥ng ph·∫£i form c·ªßa b·∫°n.", ephemeral=True)
        await interaction.response.send_modal(InputModal(self.user_id, "suc", "B·∫°n c√≥ s·ª•c kh√¥ng?"))

    @discord.ui.button(label="Link Facebook", style=discord.ButtonStyle.success)
    async def fb_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.user_id:
            return await interaction.response.send_message("‚ùå Kh√¥ng ph·∫£i form c·ªßa b·∫°n.", ephemeral=True)
        await interaction.response.send_modal(InputModal(self.user_id, "facebook", "Nh·∫≠p link Facebook"))

    @discord.ui.button(label="SƒêT (n·∫øu c√≥)", style=discord.ButtonStyle.success)
    async def sdt_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.user_id:
            return await interaction.response.send_message("‚ùå Kh√¥ng ph·∫£i form c·ªßa b·∫°n.", ephemeral=True)
        await interaction.response.send_modal(InputModal(self.user_id, "sdt", "Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"))

# ====== Modal nh·∫≠p d·ªØ li·ªáu ======
class InputModal(discord.ui.Modal):
    def __init__(self, user_id, field, title):
        super().__init__(title=title)
        self.user_id = user_id
        self.field = field
        self.input = discord.ui.TextInput(label="Nh·∫≠p th√¥ng tin", style=discord.TextStyle.short, required=False)
        self.add_item(self.input)

    async def on_submit(self, interaction: discord.Interaction):
        data = load_data()
        user_data = data.get(str(self.user_id), {})
        user_data[self.field] = self.input.value
        data[str(self.user_id)] = user_data
        save_data(data)
        await interaction.response.send_message("‚úÖ ƒê√£ l∆∞u th√¥ng tin!", ephemeral=True)

# ====== L·ªánh nh·∫≠p m·ªõi ======
@bot.command()
async def new(ctx):
    try:
        await ctx.author.send("üìã Nh·∫≠p th√¥ng tin c·ªßa b·∫°n:", view=InfoView(ctx.author.id))
        await ctx.send("üì© M√¨nh ƒë√£ g·ª≠i form qua DM c·ªßa b·∫°n!")
    except discord.Forbidden:
        await ctx.send("‚ùå Kh√¥ng th·ªÉ g·ª≠i DM, vui l√≤ng b·∫≠t tin nh·∫Øn ri√™ng.")

# ====== L·ªánh ch·ªânh s·ª≠a ======
@bot.command()
async def edit(ctx):
    try:
        await ctx.author.send("‚úè Ch·ªânh s·ª≠a th√¥ng tin c·ªßa b·∫°n:", view=InfoView(ctx.author.id))
        await ctx.send("üì© M√¨nh ƒë√£ g·ª≠i form qua DM c·ªßa b·∫°n!")
    except discord.Forbidden:
        await ctx.send("‚ùå Kh√¥ng th·ªÉ g·ª≠i DM, vui l√≤ng b·∫≠t tin nh·∫Øn ri√™ng.")

# ====== L·ªánh t√¨m ki·∫øm ======
@bot.command()
async def timkiem(ctx, member: discord.Member):
    data = load_data()
    user_info = data.get(str(member.id), None)

    # Tr·∫°ng th√°i online/offline
    status_text = {
        discord.Status.online: "üü¢ Online",
        discord.Status.offline: "‚ö´ Offline",
        discord.Status.idle: "üåô Idle",
        discord.Status.dnd: "‚õî Do Not Disturb"
    }.get(member.status, "‚ùì Kh√¥ng r√µ")

    # Custom Status
    custom_status = None
    for activity in member.activities:
        if isinstance(activity, discord.CustomActivity):
            emoji = f"{activity.emoji} " if activity.emoji else ""
            custom_status = f"{emoji}{activity.name or ''}"
            break

    embed = discord.Embed(title=f"Th√¥ng tin c·ªßa {member.display_name}", color=0x00ffcc)
    embed.add_field(name="Tr·∫°ng th√°i", value=status_text, inline=False)
    embed.add_field(name="Custom Status", value=custom_status or "(Kh√¥ng ƒë·∫∑t)", inline=False)

    if user_info:
        for key, value in user_info.items():
            embed.add_field(name=key.capitalize(), value=value if value else "(Ch∆∞a nh·∫≠p)", inline=True)
    else:
        embed.add_field(name="Th√¥ng tin", value="(Ng∆∞·ªùi n√†y ch∆∞a nh·∫≠p !new)", inline=False)

    await ctx.send(embed=embed)
    try:
        await ctx.author.send(embed=embed)
    except:
        pass

# ====== L·ªánh FA ======
@bot.command()
async def FA(ctx):
    data = load_data()
    missing_users = []
    for member in ctx.guild.members:
        if not member.bot and str(member.id) not in data:
            missing_users.append(member.mention)

    if missing_users:
        await ctx.send("üíî Nh·ªØng ng∆∞·ªùi ch∆∞a nh·∫≠p th√¥ng tin: " + ", ".join(missing_users))
    else:
        await ctx.send("üéâ Ai c≈©ng ƒë√£ nh·∫≠p th√¥ng tin!")

# === Ch·∫°y bot ===
keep_alive()  # gi·ªØ bot s·ªëng 24/24
bot.run(TOKEN)
